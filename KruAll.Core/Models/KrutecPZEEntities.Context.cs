//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KruAll.Core.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class KrutecPZEEntities : DbContext
    {
        public KrutecPZEEntities()
            : base("name=KrutecPZEEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Abteilungen> Abteilungens { get; set; }
        public virtual DbSet<ERG_Konten> ERG_Konten { get; set; }
        public virtual DbSet<Handy> Handies { get; set; }
        public virtual DbSet<HardwareConfig> HardwareConfigs { get; set; }
        public virtual DbSet<Konten> Kontens { get; set; }
        public virtual DbSet<Kostenstellen> Kostenstellens { get; set; }
        public virtual DbSet<Personalstamm> Personalstamms { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<TabSystemDaten> TabSystemDatens { get; set; }
        public virtual DbSet<Werke> Werkes { get; set; }
        public virtual DbSet<ZITERM_V20_Vorlauftasten> ZITERM_V20_Vorlauftasten { get; set; }
        public virtual DbSet<PersonalstammListen> PersonalstammListens { get; set; }
    
        [DbFunction("KrutecPZEEntities", "ConvertToTime")]
        public virtual IQueryable<ConvertToTime_Result> ConvertToTime(Nullable<decimal> numbr)
        {
            var numbrParameter = numbr.HasValue ?
                new ObjectParameter("numbr", numbr) :
                new ObjectParameter("numbr", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ConvertToTime_Result>("[KrutecPZEEntities].[ConvertToTime](@numbr)", numbrParameter);
        }
    
        [DbFunction("KrutecPZEEntities", "Split")]
        public virtual IQueryable<Split_Result> Split(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[KrutecPZEEntities].[Split](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual int EmployeeMonth_Konten(string persno, Nullable<int> month, Nullable<int> year, Nullable<int> requestno)
        {
            var persnoParameter = persno != null ?
                new ObjectParameter("persno", persno) :
                new ObjectParameter("persno", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var requestnoParameter = requestno.HasValue ?
                new ObjectParameter("requestno", requestno) :
                new ObjectParameter("requestno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeMonth_Konten", persnoParameter, monthParameter, yearParameter, requestnoParameter);
        }
    
        public virtual int EmpMonthReport_Breaks(string persno, Nullable<int> month, Nullable<int> year)
        {
            var persnoParameter = persno != null ?
                new ObjectParameter("persno", persno) :
                new ObjectParameter("persno", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmpMonthReport_Breaks", persnoParameter, monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<GetDailyPrograms_Result> GetDailyPrograms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDailyPrograms_Result>("GetDailyPrograms");
        }
    
        public virtual ObjectResult<GetDepartments_Result> GetDepartments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDepartments_Result>("GetDepartments");
        }
    
        public virtual ObjectResult<GetPersonalDailyAccounts_Result> GetPersonalDailyAccounts(Nullable<System.DateTime> deductionDate)
        {
            var deductionDateParameter = deductionDate.HasValue ?
                new ObjectParameter("DeductionDate", deductionDate) :
                new ObjectParameter("DeductionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersonalDailyAccounts_Result>("GetPersonalDailyAccounts", deductionDateParameter);
        }
    
        public virtual ObjectResult<GetPersonalDailyPrograms_Result> GetPersonalDailyPrograms(Nullable<System.DateTime> deductionDate, ObjectParameter istzeitAccountNumber, ObjectParameter istzeitAccountName, ObjectParameter sollzeitAccountNumber, ObjectParameter sollzeitAccountName, ObjectParameter differenzAccountNumber, ObjectParameter differenzAccountName)
        {
            var deductionDateParameter = deductionDate.HasValue ?
                new ObjectParameter("DeductionDate", deductionDate) :
                new ObjectParameter("DeductionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersonalDailyPrograms_Result>("GetPersonalDailyPrograms", deductionDateParameter, istzeitAccountNumber, istzeitAccountName, sollzeitAccountNumber, sollzeitAccountName, differenzAccountNumber, differenzAccountName);
        }
    
        public virtual ObjectResult<GetPersonalStammByDeptId_Result> GetPersonalStammByDeptId(Nullable<int> deptId)
        {
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("deptId", deptId) :
                new ObjectParameter("deptId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersonalStammByDeptId_Result>("GetPersonalStammByDeptId", deptIdParameter);
        }
    
        public virtual ObjectResult<GetPersonalStammByLocationId_Result> GetPersonalStammByLocationId(Nullable<int> locationId)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersonalStammByLocationId_Result>("GetPersonalStammByLocationId", locationIdParameter);
        }
    
        public virtual ObjectResult<GetPersonalStammCostCentre_Result> GetPersonalStammCostCentre(Nullable<int> costCentreId)
        {
            var costCentreIdParameter = costCentreId.HasValue ?
                new ObjectParameter("costCentreId", costCentreId) :
                new ObjectParameter("costCentreId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersonalStammCostCentre_Result>("GetPersonalStammCostCentre", costCentreIdParameter);
        }
    
        public virtual ObjectResult<GetPersonalStammLocation_Result> GetPersonalStammLocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersonalStammLocation_Result>("GetPersonalStammLocation");
        }
    
        public virtual ObjectResult<GetPersonnelList_Result> GetPersonnelList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersonnelList_Result>("GetPersonnelList");
        }
    
        public virtual ObjectResult<ProcGetPersonalStamm_Result> ProcGetPersonalStamm()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcGetPersonalStamm_Result>("ProcGetPersonalStamm");
        }
    
        public virtual int SetFirstDayOfWeek(Nullable<int> p1)
        {
            var p1Parameter = p1.HasValue ?
                new ObjectParameter("p1", p1) :
                new ObjectParameter("p1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetFirstDayOfWeek", p1Parameter);
        }
    }
}
